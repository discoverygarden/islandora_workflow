<?php
/**
 * @file
 * A module to handle assignment of Islandora workflow objects.
 */

/**
 * Return all objects assigned to a given user, along with their workflow state.
 *
 * @param object $account
 *   a user object.
 *
 * @return array
 *   an array of results.
 */
function islandora_workflow_assignment_by_user($account, $limit = -1, $offset = 0) {

  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  global $user;

  if (empty($account)) {
    $account = drupal_clone($user);
  }

  // Get the stored query.
  $query_file_name = drupal_get_path('module', 'islandora_workflow') . '/sparql/member_query.sparql';
  $query_file_handle = fopen($query_file_name, "r");
  $query_string = fread($query_file_handle, filesize($query_file_name));
  fclose($query_file_handle);

  // We don't want results where ?assignee is not bound.
  $query = str_replace('!BOUND(?assignee) || ', '', $query_string);
  $query = str_replace("REGEX(STR(?assignee),'.?')", "STR(?assignee) = '" . $account->name . "'", $query);
  $query_results = ObjectHelper::performRiQuery($query, 'sparql', $limit, $offset);

  $objects = array();
  foreach ($query_results as $result) {
    $index = preg_replace('/^info:fedora\//', '', $result['member_object']);
    $result['islandora_workflow_modified'] = $result['timestamp'];
    unset($result['timestamp']);
    $objects[$index] = $result;
  }
  return $objects;

}

/**
 * Return all assignees for members of a given collection.
 *
 * @param string $collection_pid
 *   the PID of the collection.
 *
 * @return array
 *   an array of results.
 */
function islandora_workflow_assignment_by_collection($collection_pid) {

  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  // Get the stored query.
  $query_file_name = drupal_get_path('module', 'islandora_workflow_assignment') . '/assignee_query.sparql';
  $query_file_handle = fopen($query_file_name, "r");
  $query = fread($query_file_handle, filesize($query_file_name));
  fclose($query_file_handle);

  $query = preg_replace('/\?collection/', '"' . $collection_pid . '"', $query);
  $limit = -1;
  $query_results = ObjectHelper::performRiQuery($query, 'sparql', $limit, $offset = 0);

  return $query_results;

}

/**
 * Get permissions a user must have in order to be the assignee of an object.
 *
 * @param string $state
 *   The state of the object.
 *
 * @return array
 *   An array of permission names.
 */
function islandora_workflow_assignment_valid_assignee_permissions($state) {
  $permissions = array();
  switch ($state) {
    case 'created':
    case 'rejected':
      $permissions[] = 'islandora_workflow_Submitter';
    case 'submitted':
      $permissions[] = 'islandora_workflow_Editor';
    case 'approved':
      $permissions[] = 'islandora_workflow_Manager';
    default:
      $permissions[] = 'islandora_workflow_Administrator';
      break;
  }
  return $permissions;
}

/**
 * Remove an about-to-be-deleted user from their assignments.
 *
 * Returns an array of batch operations.
 *
 * @param object $edit
 *   The dit made to the user account.
 * @param user $account
 *   The original user account.
 *
 * @return array
 *   An array of batch operations.
 */
function islandora_workflow_assignment_user_delete_batch($edit, $account = NULL) {

  global $user;

  if (empty($account)) {
    $account = drupal_clone($user);
  }

  $assigned_objects = islandora_workflow_assignment_by_user($account);
  $pattern = '/^info:fedora\//';
  $operations = array();
  foreach ($assigned_objects as $object) {
    $truncated_pid = preg_replace($pattern, '', $object->pid);
    // Remove the assignment from each object.
    $operations[] = array(
      'islandora_workflow_assignment_remove',
      array($truncated_pid, $account->name),
    );
  }
  return $operations;
}

/**
 * Check the validity of a user's assignments after their roles have changed.
 *
 * Remove assignments which have become invalid.
 *
 * @param object $edit
 *   The edit mad to the user account.
 * @param user $account
 *   The original user account.
 * @param string $category
 *   The category of edit being made.
 *
 * @return array
 *   An array of batch operations
 */
function islandora_workflow_assignment_user_edit_batch($edit, $account, $category = NULL) {

  $operations = array();

  $iw_perms = islandora_workflow_perm();
  $assigned_objects = islandora_workflow_assignment_by_user($account);
  $existing_roles = $account->roles;
  if (empty($edit['roles'])) {
    return $operations;
  }
  $roles_diff = array_diff($account->roles, $edit['roles']);
  if (empty($roles_diff)) {
    return $operations;
  }
  $new_roles = $edit['roles'];
  foreach ($assigned_objects as $object) {
    // Check the state of each object - and match against the user's perms.
    $state = $object->state;
    $valid_perms = islandora_workflow_assignment_valid_permissions($state);
    $access = FALSE;
    $valid_roles = user_roles(FALSE, $valid_perms);
    $roles_intersection = array_intersect_key($new_roles, $valid_roles);
    if (empty($roles_intersection)) {
      $operations[] = array(
        'islandora_workflow_assignment_remove',
        array($object->pid, $account->name),
      );
    }
  }
  return $operations;
}

/**
 * Form submission handler for the admin roles form.
 *
 * Checks that users still have permissions to be assigned objects,
 * after a role they previously held has been deleted.
 * If not, the assignment will be removed.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state.
 */
function islandora_workflow_assignment_role_delete_batch($form, $form_state) {

  module_load_include('inc', 'islandora_workflow');

  if ($form_state['values']['op'] == t('Delete role')) {
    $operations = array();

    $assignee_roles = user_roles(FALSE, islandora_workflow_perm());
    $rid = $form_state['values']['rid'];
    if (!array_key_exists($rid, $assignee_roles)) {
      return;
    }
    // We know that the role being deleted can be assigned things of some state.
    $users = islandora_workflow_get_users_with_role($rid);
    $new_user = new stdClass();
    foreach ($users as $uid) {
      $account = user_load($uid);
      // Figure out if they lose any permissions as a result.
      $new_roles = array_diff_key($account->roles, array($rid => 'role name'));
      /*
       * We can perform user_access() on any stdClass object,
       * as long as it has 'uid' and 'roles' attributes.
       */
      $new_user->uid = -1;
      $new_user->roles = $new_roles;
      foreach (islandora_workflow_perm() as $iw_perm) {
        if (user_access($iw_perm, $account)) {
          $old_perms[] = $iw_perm;
        }
        if (user_access($iw_perm, $new_user)) {
          $new_perms[] = $iw_perm;
        }
      }
      $perms_diff = array_diff($old_perms, $new_perms);
      if (empty($perms_diff)) {
        // Save time if the user's permissions haven't changed.
        continue;
      }
      // If they have, go through all the items for which they are the assignee.
      $objects = islandora_workflow_assignment_by_user($account);
      foreach ($objects as $object) {
        // Work out whether they still have valid permission.
        $valid_perms = islandora_workflow_assignment_valid_permissions($object->state);
        $perms_intersection = array_intersect($new_perms, $valid_perms);
        if (empty($perms_intersection)) {
          // @TODO make this into a batch job?
          islandora_workflow_assignment_remove($object->pid, $assignee->name);
        }
      }
    }
    // @TODO finish
    return $operations;
  }
}

/**
 * Implements hook_workflow_state_change().
 *
 * Check that an object's assignee still has the right permissions
 * after its workflow state has been changed.
 * If not, remove the assignee.
 *
 * @param string $object_pid
 *   the PID of the object.
 * @param string $state
 *   the object's new workflow state.
 */
function islandora_workflow_assignment_workflow_state_change($object_pid, $state) {
  module_load_include('inc', 'islandora_workflow');

  $assignee_name = islandora_workflow_get_object_assignee($object_pid);
  if (!$assignee_name) {
    return;
  }
  $assignee = user_load(array('name' => $assignee_name));
  $valid_permissions = islandora_workflow_assignment_valid_assignee_permissions($state);
  $is_assignee_valid = FALSE;
  foreach ($valid_permissions as $permission) {
    if (user_access($permission, $assignee)) {
      $is_assignee_valid = TRUE;
      break;
    }
  }
  if (!$is_assignee_valid) {
    islandora_workflow_assignment_remove($object_pid, $assignee->name);
  }
}

/**
 * Removes the named user as the assignee for a Fedora object.
 *
 * @staticvar FedoraAPIM $apim
 *   the FedoraAPIM object
 *
 * @param string $object_pid
 *   The PID of the Fedora object
 * @param string $assignee
 *   The Drupal username of the assignee.
 *
 * @return boolean
 *   TRUE if any relationships were purged, FALSE otherwise.
 */
function islandora_workflow_assignment_remove($object_pid, $assignee = NULL) {

  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  $islandora_workflow_namespace = 'info:islandora/islandora-system:def/islandora_workflow#';
  $predicate = 'assignee';

  $item = new Fedora_Item($object_pid);
  if (!$item->exists()) {
    return FALSE;
  }
  $workflow_relationships = $item->get_rdf_relationships($islandora_workflow_namespace);

  $item->purge_relationships($predicate, $assignee, $islandora_workflow_namespace, RELS_TYPE_PLAIN_LITERAL);
  // @TODO drupal_set_message here -- OK for batch jobs?
}

/**
 * Check a collection's members for invalid assignees and remove them.
 *
 * @param string $collection_pid
 *   The PID of the parent collection.
 */
function islandora_workflow_assignment_workflow_permission_change($collection_pid) {

  module_load_include('collection.inc', 'islandora_workflow');

  // @TODO have this return an array of operations when invoked as a hook.
  $possible_assignees = get_possible_assignees(array($collection_pid));
  $members = islandora_workflow_assignment_by_collection($collection_pid);
  foreach ($members as $member) {
    if (empty($member->assignee)) {
      continue;
    }
    // @TODO continue if the user's permissions are new or unchanged
    if (empty($member->state)) {
      $member->state = 'created';
      // @TODO do we need a sensible default like this?
    }
    if (!in_array($member->assignee, $possible_assignees[$collection_pid][$member->state])) {
      islandora_workflow_assignment_remove($member->pid, $member->assignee);
    }
  }
}
